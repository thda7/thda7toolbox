{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSlider/VSlider.tsx", "../../vuetify/src/components/VSlider/VSliderThumb.tsx", "../../vuetify/src/components/VSlider/slider.ts", "../../vuetify/src/components/VSlider/VSliderTrack.tsx"],
  "sourcesContent": ["// Styles\nimport './VSlider.sass'\n\n// Components\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VLabel } from '@/components/VLabel'\nimport { VSliderThumb } from './VSliderThumb'\nimport { VSliderTrack } from './VSliderTrack'\n\n// Composables\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { makeSliderProps, useSlider } from './slider'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\nexport const VSlider = defineComponent({\n  name: 'VSlider',\n\n  props: {\n    ...makeFocusProps(),\n    ...makeSliderProps(),\n    ...makeVInputProps(),\n\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n  },\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (v: number) => true,\n  },\n\n  setup (props, { slots }) {\n    const thumbContainerRef = ref()\n\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly,\n    } = useSlider({\n      props,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleSliderMouseUp: newValue => model.value = roundValue(newValue),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleMouseMove: newValue => model.value = roundValue(newValue),\n      getActiveThumb: () => thumbContainerRef.value?.$el,\n    })\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      v => {\n        const value = typeof v === 'string' ? parseFloat(v) : v == null ? min.value : v\n\n        return roundValue(value)\n      },\n    )\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStop = computed(() => position(model.value))\n\n    useRender(() => {\n      const [inputProps, _] = filterInputProps(props)\n      const hasPrepend = !!(props.label || slots.label || slots.prepend)\n\n      return (\n        <VInput\n          class={[\n            'v-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n          ]}\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => (\n              <>\n                { slots.label?.(slotProps) ?? props.label\n                  ? (\n                    <VLabel\n                      id={ slotProps.id }\n                      class=\"v-slider__label\"\n                      text={ props.label }\n                    />\n                  ) : undefined\n                }\n\n                { slots.prepend?.(slotProps) }\n              </>\n            ) : undefined,\n            default: ({ id, messagesId }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ !readonly.value ? onSliderMousedown : undefined }\n                onTouchstartPassive={ !readonly.value ? onSliderTouchstart : undefined }\n              >\n                <input\n                  id={ id.value }\n                  name={ props.name || id.value }\n                  disabled={ props.disabled }\n                  readonly={ props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ 0 }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ thumbContainerRef }\n                  aria-describedby={ messagesId.value }\n                  focused={ isFocused.value }\n                  min={ min.value }\n                  max={ max.value }\n                  modelValue={ model.value }\n                  onUpdate:modelValue={ v => (model.value = v) }\n                  position={ trackStop.value }\n                  elevation={ props.elevation }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSlider = InstanceType<typeof VSlider>\n", "// Styles\nimport './VSliderThumb.sass'\n\n// Components\nimport { VScaleTransition } from '../transitions'\nimport { VSliderSymbol } from './slider'\n\n// Directives\nimport Ripple from '@/directives/ripple'\n\n// Composables\nimport { useElevation } from '@/composables/elevation'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { convertToUnit, defineComponent, keyValues, useRender } from '@/util'\n\nexport const VSliderThumb = defineComponent({\n  name: 'VSliderThumb',\n\n  directives: { Ripple },\n\n  props: {\n    focused: Boolean,\n    max: {\n      type: Number,\n      required: true,\n    },\n    min: {\n      type: Number,\n      required: true,\n    },\n    modelValue: {\n      type: Number,\n      required: true,\n    },\n    position: {\n      type: Number,\n      required: true,\n    },\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  emits: {\n    'update:modelValue': (v: number) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const slider = inject(VSliderSymbol)\n\n    if (!slider) throw new Error('[Vuetify] v-slider-thumb must be used inside v-slider or v-range-slider')\n\n    const {\n      thumbColor,\n      step,\n      vertical,\n      disabled,\n      thumbSize,\n      thumbLabel,\n      direction,\n      readonly,\n      elevation,\n      isReversed,\n      horizontalDirection,\n      mousePressed,\n      decimals,\n    } = slider\n\n    const { textColorClasses, textColorStyles } = useTextColor(thumbColor)\n\n    const { pageup, pagedown, end, home, left, right, down, up } = keyValues\n    const relevantKeys = [pageup, pagedown, end, home, left, right, down, up]\n\n    const multipliers = computed(() => {\n      if (step.value) return [1, 2, 3]\n      else return [1, 5, 10]\n    })\n\n    function parseKeydown (e: KeyboardEvent, value: number) {\n      if (!relevantKeys.includes(e.key)) return\n\n      e.preventDefault()\n\n      const _step = step.value || 0.1\n      const steps = (props.max - props.min) / _step\n      if ([left, right, down, up].includes(e.key)) {\n        const increase = horizontalDirection.value === 'rtl' ? [left, up] : [right, up]\n        const direction = increase.includes(e.key) ? 1 : -1\n        const multiplier = e.shiftKey ? 2 : (e.ctrlKey ? 1 : 0)\n\n        value = value + (direction * _step * multipliers.value[multiplier])\n      } else if (e.key === home) {\n        value = props.min\n      } else if (e.key === end) {\n        value = props.max\n      } else {\n        const direction = e.key === pagedown ? 1 : -1\n        value = value - (direction * _step * (steps > 100 ? steps / 10 : 10))\n      }\n\n      return Math.max(props.min, Math.min(props.max, value))\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      const newValue = parseKeydown(e, props.modelValue)\n\n      newValue != null && emit('update:modelValue', newValue)\n    }\n\n    useRender(() => {\n      const positionPercentage = convertToUnit((vertical.value || isReversed.value) ? 100 - props.position : props.position, '%')\n      const { elevationClasses } = useElevation(computed(() => !disabled.value ? elevation.value : undefined))\n\n      return (\n        <div\n          class={[\n            'v-slider-thumb',\n            {\n              'v-slider-thumb--focused': props.focused,\n              'v-slider-thumb--pressed': props.focused && mousePressed.value,\n            },\n          ]}\n          style={{\n            '--v-slider-thumb-position': positionPercentage,\n            '--v-slider-thumb-size': convertToUnit(thumbSize.value),\n          }}\n          role=\"slider\"\n          tabindex={ disabled.value ? -1 : 0 }\n          aria-valuemin={ props.min }\n          aria-valuemax={ props.max }\n          aria-valuenow={ props.modelValue }\n          aria-readonly={ readonly.value }\n          aria-orientation={ direction.value }\n          onKeydown={ !readonly.value ? onKeydown : undefined }\n        >\n          <div\n            class={[\n              'v-slider-thumb__surface',\n              textColorClasses.value,\n              elevationClasses.value,\n            ]}\n            style={{\n              ...textColorStyles.value,\n            }}\n          />\n          <div\n            class={[\n              'v-slider-thumb__ripple',\n              textColorClasses.value,\n            ]}\n            style={ textColorStyles.value }\n            v-ripple={[props.ripple, null, ['circle', 'center']]}\n          />\n          <VScaleTransition origin=\"bottom center\">\n            <div\n              class=\"v-slider-thumb__label-container\"\n              v-show={ (thumbLabel.value && props.focused) || thumbLabel.value === 'always' }\n            >\n              <div\n                class={[\n                  'v-slider-thumb__label',\n                ]}\n              >\n                <div>\n                  { slots['thumb-label']?.({ modelValue: props.modelValue }) ?? props.modelValue.toFixed(step.value ? decimals.value : 1) }\n                </div>\n              </div>\n            </div>\n          </VScaleTransition>\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSliderThumb = InstanceType<typeof VSliderThumb>\n", "/* eslint-disable max-statements */\n// Composables\nimport { makeElevationProps } from '@/composables/elevation'\nimport { makeRoundedProps } from '@/composables/rounded'\nimport { useRtl } from '@/composables/locale'\n\n// Utilities\nimport { clamp, createRange, propsFactory } from '@/util'\nimport { computed, provide, ref, toRef } from 'vue'\n\n// Types\nimport type { ExtractPropTypes, InjectionKey, PropType, Ref } from 'vue'\nimport type { VSliderTrack } from './VSliderTrack'\n\ntype Tick = {\n  value: number\n  position: number\n  label?: string\n}\n\ntype SliderProvide = {\n  activeThumbRef: Ref<HTMLElement | undefined>\n  color: Ref<string | undefined>\n  decimals: Ref<number>\n  direction: Ref<'vertical' | 'horizontal'>\n  disabled: Ref<boolean | undefined>\n  elevation: Ref<number | string | undefined>\n  min: Ref<number>\n  max: Ref<number>\n  mousePressed: Ref<boolean>\n  numTicks: Ref<number>\n  onSliderMousedown: (e: MouseEvent) => void\n  onSliderTouchstart: (e: TouchEvent) => void\n  parseMouseMove: (e: MouseEvent | TouchEvent) => number\n  position: (val: number) => number\n  readonly: Ref<boolean | undefined>\n  rounded: Ref<boolean | number | string | undefined>\n  roundValue: (value: number) => number\n  thumbLabel: Ref<boolean | string | undefined>\n  showTicks: Ref<boolean | 'always'>\n  startOffset: Ref<number>\n  step: Ref<number>\n  thumbSize: Ref<number>\n  thumbColor: Ref<string | undefined>\n  trackColor: Ref<string | undefined>\n  trackFillColor: Ref<string | undefined>\n  trackSize: Ref<number>\n  ticks: Ref<number[] | Record<string, string> | undefined>\n  tickSize: Ref<number>\n  trackContainerRef: Ref<VSliderTrack | undefined>\n  vertical: Ref<boolean>\n  parsedTicks: Ref<Tick[]>\n  hasLabels: Ref<boolean>\n  isReversed: Ref<boolean>\n  horizontalDirection: Ref<'ltr' | 'rtl'>\n}\n\nexport const VSliderSymbol: InjectionKey<SliderProvide> = Symbol.for('vuetify:v-slider')\n\nexport function getOffset (e: MouseEvent | TouchEvent, el: HTMLElement, direction: string) {\n  const vertical = direction === 'vertical'\n  const rect = el.getBoundingClientRect()\n  const touch = 'touches' in e ? e.touches[0] : e\n  return vertical\n    ? touch.clientY - (rect.top + rect.height / 2)\n    : touch.clientX - (rect.left + rect.width / 2)\n}\n\nfunction getPosition (e: MouseEvent | TouchEvent, position: 'clientX' | 'clientY'): number {\n  if ('touches' in e && e.touches.length) return e.touches[0][position]\n  else if ('changedTouches' in e && e.changedTouches.length) return e.changedTouches[0][position]\n  else return (e as MouseEvent)[position]\n}\n\nexport const makeSliderProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  readonly: Boolean,\n  max: {\n    type: [Number, String],\n    default: 100,\n  },\n  min: {\n    type: [Number, String],\n    default: 0,\n  },\n  step: {\n    type: [Number, String],\n    default: 0,\n  },\n  thumbColor: String,\n  thumbLabel: {\n    type: [Boolean, String] as PropType<boolean | 'always' | undefined>,\n    default: undefined,\n    validator: (v: any) => typeof v === 'boolean' || v === 'always',\n  },\n  thumbSize: {\n    type: [Number, String],\n    default: 20,\n  },\n  showTicks: {\n    type: [Boolean, String] as PropType<boolean | 'always'>,\n    default: false,\n    validator: (v: any) => typeof v === 'boolean' || v === 'always',\n  },\n  ticks: {\n    type: [Array, Object] as PropType<number[] | Record<number, string>>,\n  },\n  tickSize: {\n    type: [Number, String],\n    default: 2,\n  },\n  color: String,\n  trackColor: String,\n  trackFillColor: String,\n  trackSize: {\n    type: [Number, String],\n    default: 4,\n  },\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n    validator: (v: any) => ['vertical', 'horizontal'].includes(v),\n  },\n  reverse: Boolean,\n\n  ...makeRoundedProps(),\n  ...makeElevationProps({\n    elevation: 2,\n  }),\n}, 'slider')\n\ntype SliderProps = ExtractPropTypes<ReturnType<typeof makeSliderProps>>\n\nexport const useSlider = ({\n  props,\n  handleSliderMouseUp,\n  handleMouseMove,\n  getActiveThumb,\n}: {\n  props: SliderProps\n  handleSliderMouseUp: (v: number) => void\n  handleMouseMove: (v: number) => void\n  getActiveThumb: (e: MouseEvent | TouchEvent) => HTMLElement\n}) => {\n  const { isRtl } = useRtl()\n  const isReversed = toRef(props, 'reverse')\n  const horizontalDirection = computed(() => {\n    let hd: 'ltr' | 'rtl' = isRtl.value ? 'rtl' : 'ltr'\n\n    if (props.reverse) {\n      hd = hd === 'rtl' ? 'ltr' : 'rtl'\n    }\n\n    return hd\n  })\n  const min = computed(() => parseFloat(props.min))\n  const max = computed(() => parseFloat(props.max))\n  const step = computed(() => props.step > 0 ? parseFloat(props.step) : 0)\n  const decimals = computed(() => {\n    const trimmedStep = step.value.toString().trim()\n    return trimmedStep.includes('.')\n      ? (trimmedStep.length - trimmedStep.indexOf('.') - 1)\n      : 0\n  })\n\n  const thumbSize = computed(() => parseInt(props.thumbSize, 10))\n  const tickSize = computed(() => parseInt(props.tickSize, 10))\n  const trackSize = computed(() => parseInt(props.trackSize, 10))\n  const numTicks = computed(() => (max.value - min.value) / step.value)\n  const disabled = toRef(props, 'disabled')\n  const vertical = computed(() => props.direction === 'vertical')\n\n  const thumbColor = computed(() => props.error || props.disabled ? undefined : props.thumbColor ?? props.color)\n  const trackColor = computed(() => props.error || props.disabled ? undefined : props.trackColor ?? props.color)\n  const trackFillColor = computed(() => props.error || props.disabled ? undefined : props.trackFillColor ?? props.color)\n\n  const mousePressed = ref(false)\n\n  const startOffset = ref(0)\n  const trackContainerRef = ref<VSliderTrack | undefined>()\n  const activeThumbRef = ref<HTMLElement | undefined>()\n\n  function roundValue (value: number) {\n    if (step.value <= 0) return value\n\n    const clamped = clamp(value, min.value, max.value)\n    const offset = min.value % step.value\n    const newValue = Math.round((clamped - offset) / step.value) * step.value + offset\n\n    return parseFloat(Math.min(newValue, max.value).toFixed(decimals.value))\n  }\n\n  function parseMouseMove (e: MouseEvent | TouchEvent): number {\n    const vertical = props.direction === 'vertical'\n    const start = vertical ? 'top' : 'left'\n    const length = vertical ? 'height' : 'width'\n    const position = vertical ? 'clientY' : 'clientX'\n\n    const {\n      [start]: trackStart,\n      [length]: trackLength,\n    } = trackContainerRef.value?.$el.getBoundingClientRect()\n    const clickOffset = getPosition(e, position)\n\n    // It is possible for left to be NaN, force to number\n    let clickPos = Math.min(Math.max((clickOffset - trackStart - startOffset.value) / trackLength, 0), 1) || 0\n\n    if (vertical || horizontalDirection.value === 'rtl') clickPos = 1 - clickPos\n\n    return roundValue(min.value + clickPos * (max.value - min.value))\n  }\n\n  let thumbMoved = false\n\n  const handleStop = (e: MouseEvent | TouchEvent) => {\n    if (!thumbMoved) {\n      startOffset.value = 0\n      handleSliderMouseUp(parseMouseMove(e))\n    }\n\n    mousePressed.value = false\n    thumbMoved = false\n    startOffset.value = 0\n  }\n\n  const handleStart = (e: MouseEvent | TouchEvent) => {\n    activeThumbRef.value = getActiveThumb(e)\n\n    if (!activeThumbRef.value) return\n\n    activeThumbRef.value.focus()\n    mousePressed.value = true\n\n    if (activeThumbRef.value.contains(e.target as Node)) {\n      thumbMoved = true\n      startOffset.value = getOffset(e, activeThumbRef.value, props.direction)\n    } else {\n      startOffset.value = 0\n      handleMouseMove(parseMouseMove(e))\n    }\n  }\n\n  const moveListenerOptions = { passive: true, capture: true }\n\n  function onMouseMove (e: MouseEvent | TouchEvent) {\n    thumbMoved = true\n    handleMouseMove(parseMouseMove(e))\n  }\n\n  function onSliderMouseUp (e: MouseEvent) {\n    e.stopPropagation()\n    e.preventDefault()\n\n    handleStop(e)\n\n    window.removeEventListener('mousemove', onMouseMove, moveListenerOptions)\n    window.removeEventListener('mouseup', onSliderMouseUp)\n  }\n\n  function onSliderTouchend (e: TouchEvent) {\n    handleStop(e)\n\n    window.removeEventListener('touchmove', onMouseMove, moveListenerOptions)\n    e.target?.removeEventListener('touchend', onSliderTouchend as EventListener)\n  }\n\n  function onSliderTouchstart (e: TouchEvent) {\n    handleStart(e)\n\n    window.addEventListener('touchmove', onMouseMove, moveListenerOptions)\n    e.target?.addEventListener('touchend', onSliderTouchend as EventListener, { passive: false })\n  }\n\n  function onSliderMousedown (e: MouseEvent) {\n    e.preventDefault()\n\n    handleStart(e)\n\n    window.addEventListener('mousemove', onMouseMove, moveListenerOptions)\n    window.addEventListener('mouseup', onSliderMouseUp, { passive: false })\n  }\n\n  const position = (val: number) => {\n    const percentage = (val - min.value) / (max.value - min.value) * 100\n    return clamp(isNaN(percentage) ? 0 : percentage, 0, 100)\n  }\n\n  const parsedTicks = computed<Tick[]>(() => {\n    if (!props.ticks) {\n      return numTicks.value !== Infinity ? createRange(numTicks.value + 1).map(t => {\n        const value = min.value + (t * step.value)\n        return {\n          value,\n          position: position(value),\n        }\n      }) : []\n    }\n    if (Array.isArray(props.ticks)) return props.ticks.map(t => ({ value: t, position: position(t), label: t.toString() }))\n    return Object.keys(props.ticks).map(key => ({\n      value: parseFloat(key),\n      position: position(parseFloat(key)),\n      label: (props.ticks as Record<string, string>)[key],\n    }))\n  })\n\n  const hasLabels = computed(() => parsedTicks.value.some(({ label }) => !!label))\n\n  const data: SliderProvide = {\n    activeThumbRef,\n    color: toRef(props, 'color'),\n    decimals,\n    disabled,\n    direction: toRef(props, 'direction'),\n    elevation: toRef(props, 'elevation'),\n    hasLabels,\n    horizontalDirection,\n    isReversed,\n    min,\n    max,\n    mousePressed,\n    numTicks,\n    onSliderMousedown,\n    onSliderTouchstart,\n    parsedTicks,\n    parseMouseMove,\n    position,\n    readonly: toRef(props, 'readonly'),\n    rounded: toRef(props, 'rounded'),\n    roundValue,\n    showTicks: toRef(props, 'showTicks'),\n    startOffset,\n    step,\n    thumbSize,\n    thumbColor,\n    thumbLabel: toRef(props, 'thumbLabel'),\n    ticks: toRef(props, 'ticks'),\n    tickSize,\n    trackColor,\n    trackContainerRef,\n    trackFillColor,\n    trackSize,\n    vertical,\n  }\n\n  provide(VSliderSymbol, data)\n\n  return data\n}\n", "// Styles\nimport './VSliderTrack.sass'\n\n// Components\nimport { VSliderSymbol } from './slider'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { useRounded } from '@/composables/rounded'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\n\nexport const VSliderTrack = defineComponent({\n  name: 'VSliderTrack',\n\n  props: {\n    start: {\n      type: Number,\n      required: true,\n    },\n    stop: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  emits: {},\n\n  setup (props, { slots }) {\n    const slider = inject(VSliderSymbol)\n\n    if (!slider) throw new Error('[Vuetify] v-slider-track must be inside v-slider or v-range-slider')\n\n    const {\n      color,\n      horizontalDirection,\n      parsedTicks,\n      rounded,\n      showTicks,\n      tickSize,\n      trackColor,\n      trackFillColor,\n      trackSize,\n      vertical,\n      min,\n      max,\n    } = slider\n\n    const { roundedClasses } = useRounded(rounded)\n\n    const {\n      backgroundColorClasses: trackFillColorClasses,\n      backgroundColorStyles: trackFillColorStyles,\n    } = useBackgroundColor(trackFillColor)\n\n    const {\n      backgroundColorClasses: trackColorClasses,\n      backgroundColorStyles: trackColorStyles,\n    } = useBackgroundColor(trackColor)\n\n    const startDir = computed(() => `inset-${vertical.value ? 'block-end' : 'inline-start'}`)\n    const endDir = computed(() => vertical.value ? 'height' : 'width')\n\n    const backgroundStyles = computed(() => {\n      return {\n        [startDir.value]: '0%',\n        [endDir.value]: '100%',\n      }\n    })\n\n    const trackFillWidth = computed(() => props.stop - props.start)\n\n    const trackFillStyles = computed(() => {\n      return {\n        [startDir.value]: convertToUnit(props.start, '%'),\n        [endDir.value]: convertToUnit(trackFillWidth.value, '%'),\n      }\n    })\n\n    const computedTicks = computed(() => {\n      const ticks = vertical.value ? parsedTicks.value.slice().reverse() : parsedTicks.value\n\n      return ticks.map((tick, index) => {\n        const directionProperty = vertical.value ? 'bottom' : 'margin-inline-start'\n        const directionValue = tick.value !== min.value && tick.value !== max.value ? convertToUnit(tick.position, '%') : undefined\n\n        return (\n          <div\n            key={ tick.value }\n            class={[\n              'v-slider-track__tick',\n              {\n                'v-slider-track__tick--filled': tick.position >= props.start && tick.position <= props.stop,\n                'v-slider-track__tick--first': tick.value === min.value,\n                'v-slider-track__tick--last': tick.value === max.value,\n              },\n            ]}\n            style={{ [directionProperty]: directionValue }}\n          >\n            {\n              (tick.label || slots['tick-label']) && (\n                <div class=\"v-slider-track__tick-label\">\n                  { slots['tick-label']?.({ tick, index }) ?? tick.label }\n                </div>\n              )\n            }\n          </div>\n        )\n      })\n    })\n\n    useRender(() => {\n      return (\n        <div\n          class={[\n            'v-slider-track',\n            roundedClasses.value,\n          ]}\n          style={{\n            '--v-slider-track-size': convertToUnit(trackSize.value),\n            '--v-slider-tick-size': convertToUnit(tickSize.value),\n            direction: !vertical.value ? horizontalDirection.value : undefined,\n          }}\n        >\n          <div\n            class={[\n              'v-slider-track__background',\n              trackColorClasses.value,\n              {\n                'v-slider-track__background--opacity': !!color.value || !trackFillColor.value,\n              },\n            ]}\n            style={{\n              ...backgroundStyles.value,\n              ...trackColorStyles.value,\n            }}\n          />\n          <div\n            class={[\n              'v-slider-track__fill',\n              trackFillColorClasses.value,\n            ]}\n            style={{\n              ...trackFillStyles.value,\n              ...trackFillColorStyles.value,\n            }}\n          />\n\n          { showTicks.value && (\n            <div\n              class={[\n                'v-slider-track__ticks',\n                {\n                  'v-slider-track__ticks--always-show': showTicks.value === 'always',\n                },\n              ]}\n            >\n              { computedTicks.value }\n            </div>\n          ) }\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSliderTrack = InstanceType<typeof VSliderTrack>\n"],
  "mappings": "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",
  "names": ["VSliderSymbol", "Symbol", "for", "getOffset", "e", "el", "direction", "vertical", "rect", "getBoundingClientRect", "touch", "touches", "clientY", "top", "height", "clientX", "left", "width", "getPosition", "position", "length", "changedTouches", "makeSliderProps", "propsFactory", "disabled", "Boolean", "error", "readonly", "max", "type", "Number", "String", "default", "min", "step", "thumbColor", "thumbLabel", "undefined", "validator", "v", "thumbSize", "showTicks", "ticks", "Array", "Object", "tickSize", "color", "trackColor", "trackFillColor", "trackSize", "includes", "reverse", "makeRoundedProps", "makeElevationProps", "elevation", "useSlider", "props", "handleSliderMouseUp", "handleMouseMove", "getActiveThumb", "isRtl", "useRtl", "isReversed", "toRef", "horizontalDirection", "computed", "hd", "value", "parseFloat", "decimals", "trimmedStep", "toString", "trim", "indexOf", "parseInt", "numTicks", "mousePressed", "ref", "startOffset", "trackContainerRef", "activeThumbRef", "roundValue", "clamped", "clamp", "offset", "newValue", "Math", "round", "toFixed", "parseMouseMove", "start", "trackStart", "trackLength", "$el", "clickOffset", "clickPos", "thumbMoved", "handleStop", "handleStart", "focus", "contains", "target", "moveListenerOptions", "passive", "capture", "onMouseMove", "onSliderMouseUp", "stopPropagation", "preventDefault", "window", "removeEventListener", "onSliderTouchend", "onSliderTouchstart", "addEventListener", "onSliderMousedown", "val", "percentage", "isNaN", "parsedTicks", "Infinity", "createRange", "map", "t", "isArray", "label", "keys", "key", "hasLabels", "some", "data", "rounded", "provide", "VSliderThumb", "defineComponent", "name", "directives", "Ripple", "props", "focused", "Boolean", "max", "type", "Number", "required", "min", "modelValue", "position", "ripple", "default", "emits", "v", "setup", "slots", "emit", "slider", "inject", "VSliderSymbol", "Error", "thumbColor", "step", "vertical", "disabled", "thumbSize", "thumbLabel", "direction", "readonly", "elevation", "isReversed", "horizontalDirection", "mousePressed", "decimals", "textColorClasses", "textColorStyles", "useTextColor", "pageup", "pagedown", "end", "home", "left", "right", "down", "up", "keyValues", "relevantKeys", "multipliers", "computed", "value", "parseKeydown", "e", "includes", "key", "preventDefault", "_step", "steps", "increase", "multiplier", "shiftKey", "ctrlKey", "Math", "onKeydown", "newValue", "useRender", "positionPercentage", "convertToUnit", "elevationClasses", "useElevation", "undefined", "toFixed", "VSliderTrack", "defineComponent", "name", "props", "start", "type", "Number", "required", "stop", "emits", "setup", "slots", "slider", "inject", "VSliderSymbol", "Error", "color", "horizontalDirection", "parsedTicks", "rounded", "showTicks", "tickSize", "trackColor", "trackFillColor", "trackSize", "vertical", "min", "max", "roundedClasses", "useRounded", "backgroundColorClasses", "trackFillColorClasses", "backgroundColorStyles", "trackFillColorStyles", "useBackgroundColor", "trackColorClasses", "trackColorStyles", "startDir", "computed", "value", "endDir", "backgroundStyles", "trackFillWidth", "trackFillStyles", "convertToUnit", "computedTicks", "ticks", "slice", "reverse", "map", "tick", "index", "directionProperty", "directionValue", "position", "undefined", "label", "useRender", "direction", "VSlider", "defineComponent", "name", "props", "makeFocusProps", "makeSliderProps", "makeVInputProps", "modelValue", "type", "Number", "String", "default", "emits", "value", "v", "setup", "slots", "thumbContainerRef", "ref", "min", "max", "mousePressed", "roundValue", "onSliderMousedown", "onSliderTouchstart", "trackContainerRef", "position", "hasLabels", "readonly", "useSlider", "handleSliderMouseUp", "newValue", "model", "handleMouseMove", "getActiveThumb", "$el", "useProxiedModel", "undefined", "parseFloat", "isFocused", "focus", "blur", "useFocus", "trackStop", "computed", "useRender", "inputProps", "_", "filterInputProps", "hasPrepend", "label", "prepend", "disabled", "slotProps", "id", "messagesId", "elevation"]
}
