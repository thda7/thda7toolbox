{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSnackbar/VSnackbar.tsx"],
  "sourcesContent": ["// Styles\nimport './VSnackbar.sass'\n\n// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\nimport { forwardRefs } from '@/composables/forwardRefs'\n\n// Utilities\nimport { mergeProps, onMounted, ref, watch } from 'vue'\nimport { genericComponent, omit, useRender } from '@/util'\nimport { filterVOverlayProps, makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Types\nimport type { SlotsToProps } from '@/util'\n\nexport const VSnackbar = genericComponent<new () => {\n  $props: SlotsToProps<{\n    activator: [{ isActive: boolean, props: Record<string, any> }]\n    default: []\n    actions: []\n  }>\n}>()({\n  name: 'VSnackbar',\n\n  props: {\n    multiLine: Boolean,\n    timeout: {\n      type: [Number, String],\n      default: 5000,\n    },\n    vertical: Boolean,\n\n    ...makeLocationProps({ location: 'bottom' } as const),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeVariantProps(),\n    ...makeThemeProps(),\n    ...omit(makeVOverlayProps({\n      transition: 'v-snackbar-transition',\n    }), ['persistent', 'noClickAnimation', 'scrim', 'scrollStrategy']),\n  },\n\n  emits: {\n    'update:modelValue': (v: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { scopeId } = useScopeId()\n    const { themeClasses } = provideTheme(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { roundedClasses } = useRounded(props)\n\n    const overlay = ref<VOverlay>()\n\n    watch(isActive, startTimeout)\n    watch(() => props.timeout, startTimeout)\n\n    onMounted(() => {\n      if (isActive.value) startTimeout()\n    })\n\n    let activeTimeout = -1\n    function startTimeout () {\n      window.clearTimeout(activeTimeout)\n      const timeout = Number(props.timeout)\n\n      if (!isActive.value || timeout === -1) return\n\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false\n      }, timeout)\n    }\n\n    function onPointerenter () {\n      window.clearTimeout(activeTimeout)\n    }\n\n    useRender(() => {\n      const [overlayProps] = filterVOverlayProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-snackbar',\n            {\n              'v-snackbar--active': isActive.value,\n              'v-snackbar--multi-line': props.multiLine && !props.vertical,\n              'v-snackbar--vertical': props.vertical,\n            },\n            positionClasses.value,\n          ]}\n          { ...overlayProps }\n          v-model={ isActive.value }\n          contentProps={ mergeProps({\n            style: locationStyles.value,\n          }, overlayProps.contentProps) }\n          persistent\n          noClickAnimation\n          scrim={ false }\n          scrollStrategy=\"none\"\n          { ...scopeId }\n          v-slots={{ activator: slots.activator }}\n        >\n          <div\n            class={[\n              'v-snackbar__wrapper',\n              themeClasses.value,\n              colorClasses.value,\n              roundedClasses.value,\n              variantClasses.value,\n            ]}\n            style={[colorStyles.value]}\n            onPointerenter={ onPointerenter }\n            onPointerleave={ startTimeout }\n          >\n            { genOverlays(false, 'v-snackbar') }\n\n            { slots.default && (\n              <div\n                class=\"v-snackbar__content\"\n                role=\"status\"\n                aria-live=\"polite\"\n              >\n                { slots.default() }\n              </div>\n            ) }\n\n            { slots.actions && (\n              <VDefaultsProvider\n                defaults={{\n                  VBtn: {\n                    variant: 'text',\n                    ripple: false,\n                  },\n                }}\n              >\n                <div class=\"v-snackbar__actions\">\n                  { slots.actions() }\n                </div>\n              </VDefaultsProvider>\n            ) }\n          </div>\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({}, overlay)\n  },\n})\n\nexport type VSnackbar = InstanceType<typeof VSnackbar>\n"],
  "mappings": "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",
  "names": ["VSnackbar", "genericComponent", "name", "props", "multiLine", "Boolean", "timeout", "type", "Number", "String", "default", "vertical", "makeLocationProps", "location", "makePositionProps", "makeRoundedProps", "makeVariantProps", "makeThemeProps", "omit", "makeVOverlayProps", "transition", "emits", "v", "setup", "slots", "isActive", "useProxiedModel", "locationStyles", "useLocation", "positionClasses", "usePosition", "scopeId", "useScopeId", "themeClasses", "provideTheme", "colorClasses", "colorStyles", "variantClasses", "useVariant", "roundedClasses", "useRounded", "overlay", "ref", "watch", "startTimeout", "onMounted", "value", "activeTimeout", "window", "clearTimeout", "setTimeout", "onPointerenter", "useRender", "overlayProps", "filterVOverlayProps", "mergeProps", "style", "contentProps", "genOverlays", "actions", "VBtn", "variant", "ripple", "activator", "forwardRefs"]
}
